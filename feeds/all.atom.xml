<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>keep thinking</title><link href="/" rel="alternate"></link><link href="/feeds/all.atom.xml" rel="self"></link><id>/</id><updated>2016-09-13T10:20:00+08:00</updated><entry><title>Git note</title><link href="/git-note.html" rel="alternate"></link><published>2016-09-13T10:20:00+08:00</published><author><name>xyok</name></author><id>tag:,2016-09-13:git-note.html</id><summary type="html">&lt;hr /&gt;
&lt;p&gt;&lt;img alt="git" src="https://git-scm.com/images/logo@2x.png" /&gt;&lt;/p&gt;
&lt;h1&gt;git note&lt;/h1&gt;
&lt;h2&gt;0. usage&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;usage&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="o"&gt;[--&lt;/span&gt;&lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[--&lt;/span&gt;&lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[-&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;]&lt;/span&gt; &lt;span class="o"&gt;[-&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
           &lt;span class="o"&gt;[--&lt;/span&gt;&lt;span class="n"&gt;exec&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;[=&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;]]&lt;/span&gt; &lt;span class="o"&gt;[--&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[--&lt;/span&gt;&lt;span class="n"&gt;man&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[--&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
           &lt;span class="o"&gt;[-&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;paginate&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;no&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;pager&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[--&lt;/span&gt;&lt;span class="n"&gt;no&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[--&lt;/span&gt;&lt;span class="n"&gt;bare&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
           &lt;span class="o"&gt;[--&lt;/span&gt;&lt;span class="n"&gt;git&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;dir&lt;/span&gt;&lt;span class="o"&gt;=&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;]&lt;/span&gt; &lt;span class="o"&gt;[--&lt;/span&gt;&lt;span class="n"&gt;work&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;tree&lt;/span&gt;&lt;span class="o"&gt;=&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;]&lt;/span&gt; &lt;span class="o"&gt;[--&lt;/span&gt;&lt;span class="kd"&gt;namespace&lt;/span&gt;&lt;span class="o"&gt;=&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;]&lt;/span&gt;
           &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;[&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;]&lt;/span&gt;

&lt;span class="err"&gt;这些是各种场合常见的&lt;/span&gt; &lt;span class="n"&gt;Git&lt;/span&gt; &lt;span class="err"&gt;命令：&lt;/span&gt;

&lt;span class="err"&gt;开始一个工作区（参见：&lt;/span&gt;&lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;help&lt;/span&gt; &lt;span class="n"&gt;tutorial&lt;/span&gt;&lt;span class="err"&gt;）&lt;/span&gt;
   &lt;span class="n"&gt;clone&lt;/span&gt;      &lt;span class="err"&gt;克隆一个仓库到一个新目录&lt;/span&gt;
   &lt;span class="n"&gt;init&lt;/span&gt;       &lt;span class="err"&gt;创建一个空的&lt;/span&gt; &lt;span class="n"&gt;Git&lt;/span&gt; &lt;span class="err"&gt;仓库或重新初始化一个已存在的仓库&lt;/span&gt;

&lt;span class="err"&gt;在当前变更上工作（参见：&lt;/span&gt;&lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;help&lt;/span&gt; &lt;span class="n"&gt;everyday&lt;/span&gt;&lt;span class="err"&gt;）&lt;/span&gt;
   &lt;span class="n"&gt;add&lt;/span&gt;        &lt;span class="err"&gt;添加文件内容至索引&lt;/span&gt;
   &lt;span class="n"&gt;mv&lt;/span&gt;         &lt;span class="err"&gt;移动或重命名一个文件、目录或符号链接&lt;/span&gt;
   &lt;span class="n"&gt;reset&lt;/span&gt;      &lt;span class="err"&gt;重置当前&lt;/span&gt; &lt;span class="n"&gt;HEAD&lt;/span&gt; &lt;span class="err"&gt;到指定状态&lt;/span&gt;
   &lt;span class="n"&gt;rm&lt;/span&gt;         &lt;span class="err"&gt;从工作区和索引中删除文件&lt;/span&gt;

&lt;span class="err"&gt;检查历史和状态（参见：&lt;/span&gt;&lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;help&lt;/span&gt; &lt;span class="n"&gt;revisions&lt;/span&gt;&lt;span class="err"&gt;）&lt;/span&gt;
   &lt;span class="n"&gt;bisect&lt;/span&gt;     &lt;span class="err"&gt;通过二分查找定位引入&lt;/span&gt; &lt;span class="n"&gt;bug&lt;/span&gt; &lt;span class="err"&gt;的提交&lt;/span&gt;
   &lt;span class="n"&gt;grep&lt;/span&gt;       &lt;span class="err"&gt;输出和模式匹配的行&lt;/span&gt;
   &lt;span class="n"&gt;log&lt;/span&gt;        &lt;span class="err"&gt;显示提交日志&lt;/span&gt;
   &lt;span class="n"&gt;show&lt;/span&gt;       &lt;span class="err"&gt;显示各种类型的对象&lt;/span&gt;
   &lt;span class="n"&gt;status&lt;/span&gt;     &lt;span class="err"&gt;显示工作区状态&lt;/span&gt;

&lt;span class="err"&gt;扩展、标记和调校您的历史记录&lt;/span&gt;
   &lt;span class="n"&gt;branch&lt;/span&gt;     &lt;span class="err"&gt;列出、创建或删除分支&lt;/span&gt;
   &lt;span class="n"&gt;checkout&lt;/span&gt;   &lt;span class="err"&gt;切换分支或恢复工作区文件&lt;/span&gt;
   &lt;span class="n"&gt;commit&lt;/span&gt;     &lt;span class="err"&gt;记录变更到仓库&lt;/span&gt;
   &lt;span class="n"&gt;diff&lt;/span&gt;       &lt;span class="err"&gt;显示提交之间、提交和工作区之间等的差异&lt;/span&gt;
   &lt;span class="n"&gt;merge&lt;/span&gt;      &lt;span class="err"&gt;合并两个或更多开发历史&lt;/span&gt;
   &lt;span class="n"&gt;rebase&lt;/span&gt;     &lt;span class="err"&gt;本地提交转移至更新后的上游分支中&lt;/span&gt;
   &lt;span class="n"&gt;tag&lt;/span&gt;        &lt;span class="err"&gt;创建、列出、删除或校验一个&lt;/span&gt; &lt;span class="n"&gt;GPG&lt;/span&gt; &lt;span class="err"&gt;签名的标签对象&lt;/span&gt;

&lt;span class="err"&gt;协同（参见：&lt;/span&gt;&lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;help&lt;/span&gt; &lt;span class="n"&gt;workflows&lt;/span&gt;&lt;span class="err"&gt;）&lt;/span&gt;
   &lt;span class="n"&gt;fetch&lt;/span&gt;      &lt;span class="err"&gt;从另外一个仓库下载对象和引用&lt;/span&gt;
   &lt;span class="n"&gt;pull&lt;/span&gt;       &lt;span class="err"&gt;获取并整合另外的仓库或一个本地分支&lt;/span&gt;
   &lt;span class="n"&gt;push&lt;/span&gt;       &lt;span class="err"&gt;更新远程引用和相关的对象&lt;/span&gt;

&lt;span class="err"&gt;命令&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;git help -a&amp;#39;&lt;/span&gt; &lt;span class="err"&gt;和&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;git help -g&amp;#39;&lt;/span&gt; &lt;span class="err"&gt;显示可用的子命令和一些概念帮助。&lt;/span&gt;
&lt;span class="err"&gt;查看&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;git help &amp;lt;命令&amp;gt;&amp;#39;&lt;/span&gt; &lt;span class="err"&gt;或&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;git help &amp;lt;概念&amp;gt;&amp;#39;&lt;/span&gt; &lt;span class="err"&gt;以获取给定子命令或概念的&lt;/span&gt;
&lt;span class="err"&gt;帮助。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;1. 初始化&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;用法：git init [-q | --quiet] [--bare] [--template=&amp;lt;模板目录&amp;gt;] [--shared[=&amp;lt;权限&amp;gt;]] [&amp;lt;目录&amp;gt;]

    --template &amp;lt;模板目录&amp;gt;
                          模板目录将被使用
    --bare                创建一个纯仓库
    --shared[=&amp;lt;权限&amp;gt;]     指定 git 仓库是多个用户之间共享的
    -q, --quiet           静默模式
    --separate-git-dir &amp;lt;git目录&amp;gt;
                          git目录和工作区分离
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;2. 克隆&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;用法：git clone [&amp;lt;选项&amp;gt;] [--] &amp;lt;仓库&amp;gt; [&amp;lt;路径&amp;gt;]

    -v, --verbose         更加详细
    -q, --quiet           更加安静
    --progress            强制显示进度报告
    -n, --no-checkout     不创建一个检出
    --bare                创建一个纯仓库
    --mirror              创建一个镜像仓库（也是纯仓库）
    -l, --local           从本地仓库克隆
    --no-hardlinks        不使用本地硬链接，始终复制
    -s, --shared          设置为共享仓库
    --recursive           在克隆时初始化子模组
    --recurse-submodules  在克隆时初始化子模组
    --template &amp;lt;模板目录&amp;gt;
                          模板目录将被使用
    --reference &amp;lt;仓库&amp;gt;    参考仓库
    --dissociate          仅在克隆时参考 --reference 指向的本地仓库
    -o, --origin &amp;lt;名称&amp;gt;   使用 &amp;lt;名称&amp;gt; 而不是 &amp;#39;origin&amp;#39; 去跟踪上游
    -b, --branch &amp;lt;分支&amp;gt;   检出 &amp;lt;分支&amp;gt; 而不是远程 HEAD
    -u, --upload-pack &amp;lt;路径&amp;gt;
                          远程 git-upload-pack 路径
    --depth &amp;lt;深度&amp;gt;        创建一个指定深度的浅克隆
    --single-branch       只克隆一个分支、HEAD 或 --branch
    --separate-git-dir &amp;lt;git目录&amp;gt;
                          git目录和工作区分离
    -c, --config &amp;lt;key=value&amp;gt;
                          在新仓库中设置配置信息
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;3. git add&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;用法：git add [&amp;lt;选项&amp;gt;] [--] &amp;lt;路径规格&amp;gt;...

    -n, --dry-run         演习
    -v, --verbose         冗长输出

    -i, --interactive     交互式拣选
    -p, --patch           交互式挑选数据块
    -e, --edit            编辑当前差异并应用
    -f, --force           允许添加忽略的文件
    -u, --update          更新已跟踪的文件
    -N, --intent-to-add   只记录，该路径稍后再添加
    -A, --all             添加所有改变的已跟踪文件和未跟踪文件
    --ignore-removal      忽略工作区中移除的路径（和 --no-all 相同）
    --refresh             不添加，只刷新索引
    --ignore-errors       跳过因出错不能添加的文件
    --ignore-missing      检查在演习模式下文件（即使不存在）是否被忽略
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;4. git log&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;用法：git log [&amp;lt;选项&amp;gt;] [&amp;lt;版本范围&amp;gt;] [[--] &amp;lt;路径&amp;gt;...]
   或：git show [&amp;lt;选项&amp;gt;] &amp;lt;对象&amp;gt;...

    -q, --quiet           不显示差异输出
    --source              显示源
    --use-mailmap         使用邮件映射文件
    --decorate[=...]      修饰选项
    -L &amp;lt;n,m:file&amp;gt;         处理文件中第 n 到 m 之间的行，从 1 开始
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;5. git status&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;用法：git status [&amp;lt;选项&amp;gt;] [--] &amp;lt;路径规格&amp;gt;...

    -v, --verbose         冗长输出
    -s, --short           以简洁的格式显示状态
    -b, --branch          显示分支信息
    --porcelain           机器可读的输出
    --long                以长格式显示状态（默认）
    -z, --null            条目以 NUL 字符结尾
    -u, --untracked-files[=&amp;lt;模式&amp;gt;]
                          显示未跟踪的文件，“模式”的可选参数：all、normal、no。（默认：all）
    --ignored             显示忽略的文件
    --ignore-submodules[=&amp;lt;何时&amp;gt;]
                          忽略子模组的更改，“何时”的可选参数：all、dirty、untracked。（默认：all）
    --column[=&amp;lt;风格&amp;gt;]     以列的方式显示未跟踪的文件
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;6. 分支&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;用法：git branch [&amp;lt;选项&amp;gt;] [-r | -a] [--merged | --no-merged]
   或：git branch [&amp;lt;选项&amp;gt;] [-l] [-f] &amp;lt;分支名&amp;gt; [&amp;lt;起始点&amp;gt;]
   或：git branch [&amp;lt;选项&amp;gt;] [-r] (-d | -D) &amp;lt;分支名&amp;gt;...
   或：git branch [&amp;lt;选项&amp;gt;] (-m | -M) [&amp;lt;旧分支&amp;gt;] &amp;lt;新分支&amp;gt;
   或：git branch [&amp;lt;选项&amp;gt;] [-r | -a] [--points-at]

通用选项
    -v, --verbose         显示哈希值和主题，若参数出现两次则显示上游分支
    -q, --quiet           不显示信息
    -t, --track           设置跟踪模式（参见 git-pull(1)）
    --set-upstream        改变上游信息
    -u, --set-upstream-to &amp;lt;upstream&amp;gt;
                          change the upstream info
    --unset-upstream      Unset the upstream info
    --color[=&amp;lt;何时&amp;gt;]      使用彩色输出
    -r, --remotes         作用于远程跟踪分支
    --contains &amp;lt;提交&amp;gt;     只打印包含该提交的分支
    --abbrev[=&amp;lt;n&amp;gt;]        用 &amp;lt;n&amp;gt; 位数字显示 SHA-1 哈希值

具体的 git-branch 动作：
    -a, --all             列出远程跟踪及本地分支
    -d, --delete          删除完全合并的分支
    -D                    删除分支（即使没有合并）
    -m, --move            移动/重命名一个分支，以及它的引用日志
    -M                    移动/重命名一个分支，即使目标已存在
    --list                列出分支名
    -l, --create-reflog   创建分支的引用日志
    --edit-description    标记分支的描述
    -f, --force           强制创建、移动/重命名、删除
    --merged &amp;lt;提交&amp;gt;       只打印已经合并的分支
    --no-merged &amp;lt;提交&amp;gt;    只打印尚未合并的分支
    --column[=&amp;lt;风格&amp;gt;]     以列的方式显示分支
    --sort &amp;lt;key&amp;gt;          排序的字段名
    --points-at &amp;lt;对象&amp;gt;    只打印指向该对象的分支
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;7. git checkout&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;用法：git checkout [&amp;lt;选项&amp;gt;] &amp;lt;分支&amp;gt;
   或：git checkout [&amp;lt;选项&amp;gt;] [&amp;lt;分支&amp;gt;] -- &amp;lt;文件&amp;gt;...

    -q, --quiet           不显示进度报告
    -b &amp;lt;分支&amp;gt;             创建并检出一个新的分支
    -B &amp;lt;分支&amp;gt;             创建/重置并检出一个分支
    -l                    为新的分支创建引用日志
    --detach              成为指向该提交的分离头指针
    -t, --track           为新的分支设置上游信息
    --orphan &amp;lt;新分支&amp;gt;     新的没有父提交的分支
    -2, --ours            对尚未合并的文件检出我们的版本
    -3, --theirs          对尚未合并的文件检出他们的版本
    -f, --force           强制检出（丢弃本地修改）
    -m, --merge           和新的分支执行三方合并
    --overwrite-ignore    更新忽略的文件（默认）
    --conflict &amp;lt;风格&amp;gt;     冲突输出风格（merge 或 diff3）
    -p, --patch           交互式挑选数据块
    --ignore-skip-worktree-bits
                          对路径不做稀疏检出的限制
    --ignore-other-worktrees
                          不检查指定的引用是否被其他工作区所占用
    --progress            强制显示进度报告
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;8. git commit&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;用法：git commit [&amp;lt;选项&amp;gt;] [--] &amp;lt;路径规格&amp;gt;...

    -q, --quiet           提交成功后不显示概述信息
    -v, --verbose         在提交说明模板里显示差异

提交说明选项
    -F, --file &amp;lt;文件&amp;gt;     从文件中读取提交说明
    --author &amp;lt;作者&amp;gt;       提交时覆盖作者
    --date &amp;lt;日期&amp;gt;         提交时覆盖日期
    -m, --message &amp;lt;说明&amp;gt;  提交说明
    -c, --reedit-message &amp;lt;提交&amp;gt;
                          重用并编辑指定提交的提交说明
    -C, --reuse-message &amp;lt;提交&amp;gt;
                          重用指定提交的提交说明
    --fixup &amp;lt;提交&amp;gt;        使用 autosquash 格式的提交说明用以修正指定的提交
    --squash &amp;lt;提交&amp;gt;       使用 autosquash 格式的提交说明用以压缩至指定的提交
    --reset-author        现在将该提交的作者改为我（和 -C/-c/--amend 参数共用）
    -s, --signoff         添加 Signed-off-by: 签名
    -t, --template &amp;lt;文件&amp;gt;
                          使用指定的模板文件
    -e, --edit            强制编辑提交
    --cleanup &amp;lt;default&amp;gt;   设置如何删除提交说明里的空格和#注释
    --status              在提交说明模板里包含状态信息
    -S, --gpg-sign[=&amp;lt;key-id&amp;gt;]
                          GPG 提交签名

提交内容选项
    -a, --all             提交所有改动的文件
    -i, --include         添加指定的文件到索引区等待提交
    --interactive         交互式添加文件
    -p, --patch           交互式添加变更
    -o, --only            只提交指定的文件
    -n, --no-verify       绕过 pre-commit 钩子
    --dry-run             显示将要提交的内容
    --short               以简洁的格式显示状态
    --branch              显示分支信息
    --porcelain           机器可读的输出
    --long                以长格式显示状态（默认）
    -z, --null            条目以 NUL 字符结尾
    --amend               修改先前的提交
    --no-post-rewrite     绕过 post-rewrite 钩子
    -u, --untracked-files[=&amp;lt;模式&amp;gt;]
                          显示未跟踪的文件，“模式”的可选参数：all、normal、no。（默认：all）
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;9. 合并&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;用法：git merge [&amp;lt;选项&amp;gt;] [&amp;lt;提交&amp;gt;...]
   或：git merge [&amp;lt;选项&amp;gt;] &amp;lt;说明&amp;gt; HEAD &amp;lt;提交&amp;gt;
   或：git merge --abort

    -n                    在合并的最后不显示差异统计
    --stat                在合并的最后显示差异统计
    --summary             （和 --stat 同义）
    --log[=&amp;lt;n&amp;gt;]           在合并提交信息中添加（最多 &amp;lt;n&amp;gt; 条）精简提交记录
    --squash              创建一个单独的提交而不是做一次合并
    --commit              如果合并成功，执行一次提交（默认）
    -e, --edit            在提交前编辑提交说明
    --ff                  允许快进（默认）
    --ff-only             如果不能快进就放弃合并
    --rerere-autoupdate   如果可能，重用冲突解决更新索引
    --verify-signatures   验证指定的提交是否包含一个有效的 GPG 签名
    -s, --strategy &amp;lt;策略&amp;gt;
                          要使用的合并策略
    -X, --strategy-option &amp;lt;option=value&amp;gt;
                          所选的合并策略的选项
    -m, --message &amp;lt;说明&amp;gt;  合并的提交说明（针对非快进式合并）
    -v, --verbose         更加详细
    -q, --quiet           更加安静
    --abort               放弃当前正在进行的合并
    --progress            强制显示进度报告
    -S, --gpg-sign[=&amp;lt;key-id&amp;gt;]
                          GPG 提交签名
    --overwrite-ignore    更新忽略的文件（默认）
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;10. 标签&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;用法：git tag [-a | -s | -u &amp;lt;key-id&amp;gt;] [-f] [-m &amp;lt;说明&amp;gt; | -F &amp;lt;文件&amp;gt;] &amp;lt;标签名&amp;gt; [&amp;lt;头&amp;gt;]
   或：git tag -d &amp;lt;标签名&amp;gt;...
   或：git tag -l [-n[&amp;lt;数字&amp;gt;]] [--contains &amp;lt;提交&amp;gt;] [--points-at &amp;lt;对象&amp;gt;]
        [--format=&amp;lt;格式&amp;gt;] [--[no-]merged [&amp;lt;提交&amp;gt;]] [&amp;lt;模式&amp;gt;...]
   或：git tag -v &amp;lt;标签名&amp;gt;...

    -l, --list            列出标签名称
    -n[&amp;lt;n&amp;gt;]               每个标签信息打印 &amp;lt;n&amp;gt; 行
    -d, --delete          删除标签
    -v, --verify          验证标签

标签创建选项
    -a, --annotate        附注标签，需要一个说明
    -m, --message &amp;lt;说明&amp;gt;  标签说明
    -F, --file &amp;lt;文件&amp;gt;     从文件中读取提交说明
    -s, --sign            附注并附加 GPG 签名的标签
    --cleanup &amp;lt;模式&amp;gt;      设置如何删除提交说明里的空格和#注释
    -u, --local-user &amp;lt;key-id&amp;gt;
                          使用另外的私钥签名该标签
    -f, --force           如果存在，替换现有的标签
    --create-reflog       创建引用日志

标签列表选项
    --column[=&amp;lt;风格&amp;gt;]     以列的方式显示标签列表
    --contains &amp;lt;提交&amp;gt;     只打印包含提交的标签
    --merged &amp;lt;提交&amp;gt;       只打印已经合并的标签
    --no-merged &amp;lt;提交&amp;gt;    只打印尚未合并的标签
    --sort &amp;lt;key&amp;gt;          排序的字段名
    --points-at &amp;lt;对象&amp;gt;    只打印对象的标签
    --format &amp;lt;格式&amp;gt;       输出格式
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;11. 协同&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;用法：git fetch [&amp;lt;选项&amp;gt;] [&amp;lt;仓库&amp;gt; [&amp;lt;引用规格&amp;gt;...]]
   或：git fetch [&amp;lt;选项&amp;gt;] &amp;lt;组&amp;gt;
   或：git fetch --multiple [&amp;lt;选项&amp;gt;] [(&amp;lt;仓库&amp;gt; | &amp;lt;组&amp;gt;)...]
   或：git fetch --all [&amp;lt;选项&amp;gt;]

    -v, --verbose         更加详细
    -q, --quiet           更加安静
    --all                 从所有的远程抓取
    -a, --append          追加到 .git/FETCH_HEAD 而不是覆盖它
    --upload-pack &amp;lt;路径&amp;gt;  上传包到远程的路径
    -f, --force           强制覆盖本地分支
    -m, --multiple        从多个远程抓取
    -t, --tags            抓取所有的标签和关联对象
    -n                    不抓取任何标签(--no-tags)
    -p, --prune           清除远程已经不存在的分支的跟踪分支
    --recurse-submodules[=&amp;lt;on-demand&amp;gt;]
                          控制子模组的递归抓取
    --dry-run             演习
    -k, --keep            保持下载包
    -u, --update-head-ok  允许更新 HEAD 引用
    --progress            强制显示进度报告
    --depth &amp;lt;深度&amp;gt;        深化浅克隆的历史
    --unshallow           转换为一个完整的仓库
    --update-shallow      接受更新 .git/shallow 的引用
    --refmap &amp;lt;引用映射&amp;gt;   指定获取操作的引用映射
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;用法：git pull [&amp;lt;选项&amp;gt;] [&amp;lt;仓库&amp;gt; [&amp;lt;引用规格&amp;gt;...]]

    -v, --verbose         更加详细
    -q, --quiet           更加安静
    --progress            强制显示进度报告

和合并相关的选项
    -r, --rebase[=&amp;lt;false|true|preserve&amp;gt;]
                          使用变基操作取代合并操作以合入修改
    -n                    在合并的最后不显示差异统计
    --stat                在合并的最后显示差异统计
    --log[=&amp;lt;n&amp;gt;]           在合并提交信息中添加（最多 &amp;lt;n&amp;gt; 条）精简提交记录
    --squash              创建一个单独的提交而不是做一次合并
    --commit              如果合并成功，执行一次提交（默认）
    --edit                在提交前编辑提交说明
    --ff                  允许快进式
    --ff-only             如果不能快进就放弃合并
    --verify-signatures   验证指定的提交是否包含一个有效的 GPG 签名
    -s, --strategy &amp;lt;策略&amp;gt;
                          要使用的合并策略
    -X, --strategy-option &amp;lt;option=value&amp;gt;
                          所选的合并策略的选项
    -S, --gpg-sign[=&amp;lt;key-id&amp;gt;]
                          GPG 提交签名

和获取相关的参数
    --all                 从所有的远程抓取
    -a, --append          追加到 .git/FETCH_HEAD 而不是覆盖它
    --upload-pack &amp;lt;路径&amp;gt;  上传包到远程的路径
    -f, --force           强制覆盖本地分支
    -t, --tags            抓取所有的标签和关联对象
    -p, --prune           清除远程已经不存在的分支的跟踪分支
    --recurse-submodules[=&amp;lt;on-demand&amp;gt;]
                          控制子模组的递归抓取
    --dry-run             演习
    -k, --keep            保持下载包
    --depth &amp;lt;深度&amp;gt;        深化浅克隆的历史
    --unshallow           转换为一个完整的仓库
    --update-shallow      接受更新 .git/shallow 的引用
    --refmap &amp;lt;引用映射&amp;gt;   指定获取操作的引用映射
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;用法：git push [&amp;lt;选项&amp;gt;] [&amp;lt;仓库&amp;gt; [&amp;lt;引用规格&amp;gt;...]]

    -v, --verbose         更加详细
    -q, --quiet           更加安静
    --repo &amp;lt;仓库&amp;gt;         仓库
    --all                 推送所有引用
    --mirror              镜像所有引用
    --delete              删除引用
    --tags                推送标签（不能使用 --all or --mirror）
    -n, --dry-run         演习
    --porcelain           机器可读的输出
    -f, --force           强制更新
    --force-with-lease[=&amp;lt;引用名&amp;gt;:&amp;lt;期望值&amp;gt;]
                          要求引用旧的取值为设定值
    --recurse-submodules[=&amp;lt;check|on-demand|no&amp;gt;]
                          控制子模组的递归推送
    --thin                使用精简打包
    --receive-pack &amp;lt;receive-pack&amp;gt;
                          接收包程序
    --exec &amp;lt;receive-pack&amp;gt;
                          接收包程序
    -u, --set-upstream    设置 git pull/status 的上游
    --progress            强制显示进度报告
    --prune               清除本地删除的引用
    --no-verify           绕过 pre-push 钩子
    --follow-tags         推送缺失但有关的标签
    --signed[=&amp;lt;yes|no|if-asked&amp;gt;]
                          用 GPG 为推送签名
    --atomic              需要远端支持原子事务
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;12. 远端&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;用法：git remote [-v | --verbose]
   或：git remote add [-t &amp;lt;分支&amp;gt;] [-m &amp;lt;master&amp;gt;] [-f] [--tags | --no-tags] [--mirror=&amp;lt;fetch|push&amp;gt;] &amp;lt;名称&amp;gt; &amp;lt;地址&amp;gt;
   或：git remote rename &amp;lt;旧名称&amp;gt; &amp;lt;新名称&amp;gt;
   或：git remote remove &amp;lt;名称&amp;gt;
   或：git remote set-head &amp;lt;名称&amp;gt; (-a | --auto | -d | --delete | &amp;lt;分支&amp;gt;)
   或：git remote [-v | --verbose] show [-n] &amp;lt;名称&amp;gt;
   或：git remote prune [-n | --dry-run] &amp;lt;名称&amp;gt;
   或：git remote [-v | --verbose] update [-p | --prune] [(&amp;lt;组&amp;gt; | &amp;lt;远程&amp;gt;)...]
   或：git remote set-branches [--add] &amp;lt;名称&amp;gt; &amp;lt;分支&amp;gt;...
   或：git remote get-url [--push] [--all] &amp;lt;名称&amp;gt;
   或：git remote set-url [--push] &amp;lt;名称&amp;gt; &amp;lt;新的地址&amp;gt; [&amp;lt;旧的地址&amp;gt;]
   或：git remote set-url --add &amp;lt;名称&amp;gt; &amp;lt;新的地址&amp;gt;
   或：git remote set-url --delete &amp;lt;名称&amp;gt; &amp;lt;地址&amp;gt;

    -v, --verbose         冗长输出；必须置于子命令之前
&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;
&lt;h2&gt;-1. ref&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://git-scm.com/doc"&gt;git-scm.com/doc&lt;/a&gt;&lt;/p&gt;</summary><category term="git"></category></entry></feed>